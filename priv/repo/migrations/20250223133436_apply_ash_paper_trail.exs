defmodule AshPg.Repo.Migrations.ApplyAshPaperTrail do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:albums_versions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :version_action_type, :text, null: false
      add :version_action_name, :text, null: false

      add :version_source_id,
          references(:albums,
            column: :id,
            name: "albums_versions_version_source_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :changes, :map

      add :version_inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :version_updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    drop constraint("artist_albums", "artist_albums_pkey")

    create table(:artists_versions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :version_action_type, :text, null: false
      add :version_action_name, :text, null: false

      add :version_source_id,
          references(:artists,
            column: :id,
            name: "artists_versions_version_source_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :changes, :map

      add :version_inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :version_updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    create table(:artist_albums_versions, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
      add :version_action_type, :text, null: false
      add :version_action_name, :text, null: false
      add :version_source_id, :uuid, null: false
      add :changes, :map

      add :version_inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :version_updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
    end

    alter table(:artist_albums) do
      modify :album_id, :uuid, primary_key: false
      modify :artist_id, :uuid, primary_key: false
      add :id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true
    end

    alter table(:artist_albums_versions) do
      modify :version_source_id,
             references(:artist_albums,
               column: :id,
               name: "artist_albums_versions_version_source_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:artist_albums, [:artist_id, :album_id],
             where: "((archived_at IS NULL))",
             name: "artist_albums_artist_album_index"
           )
  end

  def down do
    drop constraint("artist_albums", "artist_albums_pkey")

    drop_if_exists unique_index(:artist_albums, [:artist_id, :album_id],
                     name: "artist_albums_artist_album_index"
                   )

    drop constraint(:artist_albums_versions, "artist_albums_versions_version_source_id_fkey")

    alter table(:artist_albums_versions) do
      modify :version_source_id, :uuid
    end

    alter table(:artist_albums) do
      remove :id
      modify :artist_id, :uuid, primary_key: true
      modify :album_id, :uuid, primary_key: true
    end

    drop table(:artist_albums_versions)

    drop constraint(:artists_versions, "artists_versions_version_source_id_fkey")

    drop table(:artists_versions)

    drop constraint(:albums_versions, "albums_versions_version_source_id_fkey")

    drop table(:albums_versions)
  end
end
